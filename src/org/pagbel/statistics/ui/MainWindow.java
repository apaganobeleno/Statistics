/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainWindow.java
 *
 * Created on Jun 24, 2011, 9:32:09 PM
 */
package org.pagbel.statistics.ui;

import org.pagbel.statistics.ui.structure.TeamList;
import org.pagbel.statistics.ui.structure.CreateTeam;
import de.javasoft.plaf.synthetica.SyntheticaLookAndFeel;
import java.awt.Dimension;
import java.awt.event.WindowEvent;
import javax.swing.JDesktopPane;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.event.InternalFrameEvent;
import javax.swing.event.InternalFrameListener;
import javax.swing.event.MouseInputAdapter;
import org.pagbel.statistics.engine.GameHolder;
import org.pagbel.statistics.game.Game;
import org.pagbel.statistics.hibernate.DatabaseOperator;
import org.pagbel.statistics.structure.Team;
import org.springframework.beans.factory.annotation.Autowired;
import org.pagbel.statistics.ui.action.ActionList;
import org.pagbel.statistics.ui.action.EditAction;
import org.pagbel.statistics.ui.game.CommandEditor;
import org.pagbel.statistics.ui.game.CreateGame;
import org.pagbel.statistics.ui.game.DefineRotations;
import org.pagbel.statistics.ui.game.GameList;
import org.pagbel.statistics.ui.game.GameStatus;
import org.pagbel.statistics.ui.structure.CreatePlayer;
import org.pagbel.statistics.ui.structure.CreateTournament;
import org.pagbel.statistics.ui.structure.PlayerList;
import org.pagbel.statistics.ui.structure.TournamentList;

/**
 *
 * @author apagano
 */
public class MainWindow extends javax.swing.JFrame {

  private JPanel glass;
  @Autowired
  CreateGame createGameIF;
  @Autowired
  CreateTeam createTeamIF;
  @Autowired
  DefineRotations defineRotationsIF;
  @Autowired
  DatabaseOperator databaseOperator;
  @Autowired
  TeamList teamListIF;
  @Autowired
  GameList gameListIF;
  @Autowired
  CommandEditor commandEditorIF;
  @Autowired
  GameStatus statusIF;
  @Autowired
  ActionList actionListIF;
  @Autowired
  GameHolder gameHolder;
  @Autowired
  EditAction editActionIF;
  @Autowired
  TournamentList tournamentListIF;
  @Autowired
  CreateTournament createTournamentIF;

  @Autowired
  PlayerList playerListIF;
  @Autowired
  CreatePlayer createPlayerIF;
  
  /** Creates new form MainWindow */
  public MainWindow() {
    this.initializeLookAndFeel();
    initComponents();
    addWindowListener();
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.s
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    tbarIconMenu = new javax.swing.JToolBar();
    tbarArchive = new javax.swing.JToolBar();
    tbaElements = new javax.swing.JToolBar();
    btnTorneos = new javax.swing.JButton();
    btnTeams = new javax.swing.JButton();
    btnGames = new javax.swing.JButton();
    btnFundamentals = new javax.swing.JButton();
    tbaNuevos = new javax.swing.JToolBar();
    btnNewGame = new javax.swing.JButton();
    desktopPane = new javax.swing.JDesktopPane();
    menuBar = new javax.swing.JMenuBar();
    fileMenu = new javax.swing.JMenu();
    newGameMenu = new javax.swing.JMenuItem();
    newTeamMenu = new javax.swing.JMenuItem();
    jSeparator1 = new javax.swing.JPopupMenu.Separator();
    exitMenu = new javax.swing.JMenuItem();
    editMenu = new javax.swing.JMenu();
    tournamentsListMenu = new javax.swing.JMenuItem();
    teamsListMenu = new javax.swing.JMenuItem();
    gamesListMenu = new javax.swing.JMenuItem();
    playerListMenu = new javax.swing.JMenuItem();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("Volleyball Statistics");
    setSize(new java.awt.Dimension(30, 30));

    tbarIconMenu.setFloatable(false);

    tbarArchive.setFloatable(false);
    tbarArchive.setRollover(true);

    tbaElements.setFloatable(false);
    tbaElements.setRollover(true);

    btnTorneos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/statistics/ui/icons/to.png"))); // NOI18N
    btnTorneos.setToolTipText("Tournaments"); // NOI18N
    btnTorneos.setFocusable(false);
    btnTorneos.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btnTorneos.setIconTextGap(0);
    btnTorneos.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    btnTorneos.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnTorneosActionPerformed(evt);
      }
    });
    tbaElements.add(btnTorneos);

    btnTeams.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/statistics/ui/icons/Eq.png"))); // NOI18N
    btnTeams.setToolTipText("Teams"); // NOI18N
    btnTeams.setFocusable(false);
    btnTeams.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btnTeams.setIconTextGap(0);
    btnTeams.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    btnTeams.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnTeamsActionPerformed(evt);
      }
    });
    tbaElements.add(btnTeams);

    tbarArchive.add(tbaElements);

    btnGames.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/statistics/ui/icons/Juegos.png"))); // NOI18N
    btnGames.setToolTipText("Games"); // NOI18N
    btnGames.setFocusable(false);
    btnGames.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btnGames.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    btnGames.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnGamesActionPerformed(evt);
      }
    });
    tbarArchive.add(btnGames);

    btnFundamentals.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/statistics/ui/icons/Gestos.png"))); // NOI18N
    btnFundamentals.setToolTipText("Technicals"); // NOI18N
    btnFundamentals.setFocusable(false);
    btnFundamentals.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btnFundamentals.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    tbarArchive.add(btnFundamentals);

    tbarIconMenu.add(tbarArchive);

    tbaNuevos.setFloatable(false);
    tbaNuevos.setRollover(true);

    btnNewGame.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/statistics/ui/icons/NuevoJuego.png"))); // NOI18N
    btnNewGame.setToolTipText("New Game"); // NOI18N
    btnNewGame.setFocusable(false);
    btnNewGame.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btnNewGame.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    btnNewGame.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnNewGameActionPerformed(evt);
      }
    });
    tbaNuevos.add(btnNewGame);

    tbarIconMenu.add(tbaNuevos);

    fileMenu.setText("File");
    fileMenu.setFont(new java.awt.Font("Lucida Grande", 0, 12));

    newGameMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
    newGameMenu.setFont(new java.awt.Font("Lucida Grande", 0, 12));
    newGameMenu.setText("New Game");
    newGameMenu.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        newGameMenuActionPerformed(evt);
      }
    });
    fileMenu.add(newGameMenu);

    newTeamMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
    newTeamMenu.setFont(new java.awt.Font("Lucida Grande", 0, 12));
    newTeamMenu.setText("New Team");
    newTeamMenu.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        newTeamMenuActionPerformed(evt);
      }
    });
    fileMenu.add(newTeamMenu);
    fileMenu.add(jSeparator1);

    exitMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
    exitMenu.setFont(new java.awt.Font("Lucida Grande", 0, 12));
    exitMenu.setText("Quit");
    exitMenu.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        exitMenuActionPerformed(evt);
      }
    });
    fileMenu.add(exitMenu);

    menuBar.add(fileMenu);

    editMenu.setText("Edit");
    editMenu.setFont(new java.awt.Font("Lucida Grande", 0, 12));

    tournamentsListMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
    tournamentsListMenu.setFont(new java.awt.Font("Lucida Grande", 0, 12));
    tournamentsListMenu.setText("Tournaments");
    tournamentsListMenu.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        tournamentsListMenuActionPerformed(evt);
      }
    });
    editMenu.add(tournamentsListMenu);

    teamsListMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
    teamsListMenu.setFont(new java.awt.Font("Lucida Grande", 0, 12));
    teamsListMenu.setText("Teams");
    teamsListMenu.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        teamsListMenuActionPerformed(evt);
      }
    });
    editMenu.add(teamsListMenu);

    gamesListMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
    gamesListMenu.setFont(new java.awt.Font("Lucida Grande", 0, 12));
    gamesListMenu.setText("Games");
    gamesListMenu.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        gamesListMenuActionPerformed(evt);
      }
    });
    editMenu.add(gamesListMenu);

    playerListMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
    playerListMenu.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
    playerListMenu.setText("Players");
    playerListMenu.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        playerListMenuActionPerformed(evt);
      }
    });
    editMenu.add(playerListMenu);

    menuBar.add(editMenu);

    setJMenuBar(menuBar);

    org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(org.jdesktop.layout.GroupLayout.TRAILING, tbarIconMenu, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 928, Short.MAX_VALUE)
      .add(desktopPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 928, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(layout.createSequentialGroup()
        .add(tbarIconMenu, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 41, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(desktopPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 515, Short.MAX_VALUE))
    );

    java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
    setBounds((screenSize.width-928)/2, (screenSize.height-600)/2, 928, 600);
  }// </editor-fold>//GEN-END:initComponents

  private void addWindowListener() {

    this.addWindowListener(new java.awt.event.WindowAdapter() {

      @Override
      public void windowClosing(WindowEvent winEvt) {
        Game game = gameHolder.getCurrentGame();
        if (game != null) {
          databaseOperator.update(game);
        }
      }
    });

  }

  public void initializeLookAndFeel() {
    try {
      SyntheticaLookAndFeel.setLookAndFeel("de.javasoft.plaf.synthetica.SyntheticaStandardLookAndFeel", true, true);
    } catch (Exception e) {
      JOptionPane.showMessageDialog(null, "Erro ao inicliazirar LookAndFeel!");
    }
  }

  private void newGameMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newGameMenuActionPerformed
    showCreateGame(Boolean.TRUE);
  }//GEN-LAST:event_newGameMenuActionPerformed

  private void newTeamMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newTeamMenuActionPerformed
    this.addToDesktopPane(createTeamIF);
    createTeamIF.setVisible(true);
  }//GEN-LAST:event_newTeamMenuActionPerformed

  private void teamsListMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_teamsListMenuActionPerformed
    this.addToDesktopPane(teamListIF);
    teamListIF.setVisible(true);
  }//GEN-LAST:event_teamsListMenuActionPerformed

  private void exitMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuActionPerformed
    this.setVisible(false);
    System.exit(0);
  }//GEN-LAST:event_exitMenuActionPerformed

  private void gamesListMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gamesListMenuActionPerformed
    this.showInternalFrame(gameListIF, true);
  }//GEN-LAST:event_gamesListMenuActionPerformed

  private void btnNewGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewGameActionPerformed
    this.createGameIF.dispose();
    this.showInternalFrame(createGameIF, true);
  }//GEN-LAST:event_btnNewGameActionPerformed

  private void btnTeamsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTeamsActionPerformed
    this.teamListIF.dispose();
    this.addToDesktopPane(teamListIF);
    this.teamListIF.setVisible(true);
  }//GEN-LAST:event_btnTeamsActionPerformed

  private void btnGamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGamesActionPerformed
    this.showInternalFrame(this.gameListIF, true);
  }//GEN-LAST:event_btnGamesActionPerformed

  private void btnTorneosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTorneosActionPerformed
    this.showTournamentList();
  }//GEN-LAST:event_btnTorneosActionPerformed

  private void tournamentsListMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tournamentsListMenuActionPerformed
    this.showTournamentList();
  }//GEN-LAST:event_tournamentsListMenuActionPerformed

  private void playerListMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playerListMenuActionPerformed
    this.showPlayerList();
  }//GEN-LAST:event_playerListMenuActionPerformed

  public void showCreateGame(Boolean shouldLoad ) {
    this.showInternalFrame(createGameIF, true);
    this.createGameIF.setShouldLoadOnSave(shouldLoad);
  }

  public void showCreateTeam() {
    this.showInternalFrame(createTeamIF, true);
  }
  
  public void showCreatePlayer(){
    this.showInternalFrame(createPlayerIF, true);
  }
  
  public void showPlayerList(){
    this.showInternalFrame(playerListIF, true);
  }
  
  
  public void showCreateTournament(){
    this.showInternalFrame(createTournamentIF, true);
  }

  public void showActionList() {
    Dimension rootSize = desktopPane.getSize();
    Dimension size = actionListIF.getSize();
    actionListIF.reloadActionList();
    actionListIF.setBounds((rootSize.width - size.width), 0, size.width, size.height);
    this.addToDesktopPane(actionListIF);
    actionListIF.setVisible(true);
  }

  public void showEditAction() {
    this.showInternalFrame(editActionIF, true);
  }

  public void showDefineRotations() {
    this.showInternalFrame(defineRotationsIF, true);
  }

  public void showCommandEditor() {
    CommandEditor internal = commandEditorIF;
    Dimension rootSize = desktopPane.getSize();
    Dimension size = internal.getSize();
    internal.setBounds(0, (rootSize.height - size.height), size.width, size.height);
    this.addToDesktopPane(commandEditorIF);
    commandEditorIF.setVisible(true);
  }
  
  public void showTournamentList(){
    this.tournamentListIF.reloadTableData();
    this.showInternalFrame( this.tournamentListIF , true );
  }
  
  private void showInternalFrame( JInternalFrame internal, Boolean centered ){
    
    Dimension rootSize = desktopPane.getSize();
    Dimension size = internal.getSize();

    if ( centered ){
      internal.setBounds((rootSize.width - size.width) / 2, (rootSize.height - size.height) / 2, size.width, size.height);
    } else {
      internal.setBounds(0, 0, size.width, size.height);
    }
    
    this.addToDesktopPane(internal);
    internal.setVisible(true);
  }

  public void showStatus() {
    this.showInternalFrame(statusIF, false );
  }

  public void uptateStatus() {
    statusIF.updateStatus();
  }

  private void addToDesktopPane(JInternalFrame internal) {
    desktopPane.remove(internal);
    this.desktopPane.add(internal);
  }

  public void editTeam(Team team) {
    this.createTeamIF.setSelectedTeam(team);
    this.addToDesktopPane(createTeamIF);
    createTeamIF.setVisible(true);
  }

  public void addGlassPane() {
    glass = new JPanel();
    glass.setOpaque(false);

    MouseInputAdapter adapter = new MouseInputAdapter() {
    };
    glass.addMouseListener(adapter);
    glass.addMouseMotionListener(adapter);

    desktopPane.getRootPane().setGlassPane(glass);
  }

  public void showModal(JInternalFrame internal) {

    internal.addInternalFrameListener(new InternalFrameListener() {

      public void internalFrameClosed(InternalFrameEvent evt) {
        desktopPane.getRootPane().getGlassPane().setVisible(false);
      }

      public void internalFrameClosing(InternalFrameEvent evt) {
        desktopPane.getRootPane().getGlassPane().setVisible(false);
      }

      @Override
      public void internalFrameOpened(InternalFrameEvent ife) {
      }

      @Override
      public void internalFrameIconified(InternalFrameEvent ife) {
      }

      @Override
      public void internalFrameDeiconified(InternalFrameEvent ife) {
      }

      @Override
      public void internalFrameActivated(InternalFrameEvent ife) {
      }

      @Override
      public void internalFrameDeactivated(InternalFrameEvent ife) {
      }
    });

    Dimension rootSize = glass.getSize();
    Dimension size = internal.getSize();
    internal.setBounds((rootSize.width - size.width) / 2, 100, size.width, size.height);

    glass.setVisible(true);
    glass.add(internal);
    internal.setVisible(true);
  }

  public JDesktopPane getDesktopPane() {
    return this.desktopPane;
  }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton btnFundamentals;
  private javax.swing.JButton btnGames;
  private javax.swing.JButton btnNewGame;
  private javax.swing.JButton btnTeams;
  private javax.swing.JButton btnTorneos;
  private javax.swing.JDesktopPane desktopPane;
  private javax.swing.JMenu editMenu;
  private javax.swing.JMenuItem exitMenu;
  private javax.swing.JMenu fileMenu;
  private javax.swing.JMenuItem gamesListMenu;
  private javax.swing.JPopupMenu.Separator jSeparator1;
  private javax.swing.JMenuBar menuBar;
  private javax.swing.JMenuItem newGameMenu;
  private javax.swing.JMenuItem newTeamMenu;
  private javax.swing.JMenuItem playerListMenu;
  private javax.swing.JToolBar tbaElements;
  private javax.swing.JToolBar tbaNuevos;
  private javax.swing.JToolBar tbarArchive;
  private javax.swing.JToolBar tbarIconMenu;
  private javax.swing.JMenuItem teamsListMenu;
  private javax.swing.JMenuItem tournamentsListMenu;
  // End of variables declaration//GEN-END:variables
}
